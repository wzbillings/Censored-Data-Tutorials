# One censored outcome

```{r setup}
# Setup code
library(cmdstanr)
# ggplot2 theme setup
library(ggplot2)
ggplot2::theme_set(hgp::theme_ms())
pth_base <- here::here("examples", "simple-censored-outcome")
```

Now that we've gone through a very broad overview of what censored data is,
we'll discuss a simple example with a censored outcome.

For this example, we'll stay on the theme of concentrations that we started
in the last chapter. Analyzing immunological, medical, or environmental
concentrations is a common use case of censored data that doesn't require us
to also discuss the intricacies of time-to-event analysis. This time,
we'll consider **the amount of glyphosate in household drinking water.**

## Glyphosate data simulation

In this first example, since we're trying to understand these models, we'll
**simulate our data** from a known generative model. This allows us to be
confident that our model for censored data is actually helping us to recover
the correct parameters. Once we're more comfortable with the model, we can
try to analyze some data with unknown generative processeses.

[Glyphosate](https://en.wikipedia.org/wiki/Glyphosate) is an organophosphonate pesticide originally marketed as Roundup by Monsanto. Roundup was quickly
adopted for industrial agriculture, especially after the introduction of
genetically modified Roundup-resistant crop species in the mid-90's. Due to
widespread agricultural use in the US, glyphosate is an increasingly common
groundwater contaminant, with a [Maximum Containment Level Goal of 0.7 parts
per million in tap water set by the EPA](https://web.archive.org/web/20240509003411/https://www.epa.gov/sites/default/files/2015-06/documents/epa-200.7.pdf).

1. **Source population.** Our fictional source population will be $n$ randomly
sampled households from a fictional city, indexed from $i = 1, \ldots, n$. We
only have one measurement per household. For the purposes of our study,
we'll assume that each of these houses has their own water supply (which is
unrealistic but sufficient for a censored data tutorial).
1. **Outcome variable.** For this example, our outcome (or dependent) variable
is $y_i$, the log concentration of glyphosate in parts per million (ppm) detected
from the tap in household $i$ using an analytical test.
1. **Censoring structure.** Our investigators have decided to use [the test described in this paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6163928/), which has a lower limit of detection of 2 ÂµM. Given a molar mass of 169.07 g/Mol
for glyphosate, we can convert this to an LoD of 0.33 ppm, just under half of
the MCLG. We assume there is no upper LoD or interval censoring.
1. **Independent variables.** For the sake of this example, we will measure a
few independent variables at the household level. Without doing any research
on the actual patterns of glyphosate distribution in groundwater, we'll assume
that glyphosate concentration is affected by:
	1. distance to the nearest agriculture site (km).
	1. whether the home uses glyphosate-based pesticides for personal gardening.
	1. whether the home has a water filter on the primary tap.

To get our data, we'll first randomly generate our covariates. Let's assume that
our town of interest is a square, so we can normalize all of the distances so
that each side of the square has length 1. Then (again somewhat unrealistically)
we'll assume that home X and Y coordinates are independently drawn from a
uniform distribution on $(0, 1)$. For convenience, we'll place the only farm
in town at $(0.5, 0.5)$ and calculate the distances. Then since the other
two independent variables are binary, we'll randomly sample those for each house,
say with respective probabilities $0.2$ and $0.4$.

```{r gly data independent variables}
set.seed(370)
N <- 147
gly_preds <-
	tibble::tibble(
		house_x_coord = runif(N, 0, 1),
		house_y_coord = runif(N, 0, 1),
		dist_from_farm = sqrt((house_x_coord - 0.5)^2 + (house_y_coord - 0.5)^2),
		personal_gly_use = rbinom(N, 1, 0.2),
		water_filter_use = rbinom(N, 1, 0.4)
	)
head(gly_preds)
```

Now we need to describe our data generating model for the outcome. Of course,
I am just going to randomly pick some parameters and mess around until they
look about right -- we know that our glyphosate levels should be somewhere in
the neighborhood of $(0, 1.4)$-ish. We'll use a linear model, which means
we assume that:
$$
\begin{aligned}
\log(y_i^*) &\sim \text{Normal}(\mu_i, \sigma^2) \\
\mu_i &= \beta_0 + \beta_1 x_{1, i} + \beta_2 x_{2, i} + \beta_3x_{3, i}.
\end{aligned}
$$
Here, $y_i$ is the concentration of glyphosate in tap water of house $i$,
$$x_{1, i}$$ is the distance from house $i$ to the farm, $x_{2, i}$ is the
personal glyphosate use variable, and $x_{3, i}$ is the water filter use
variable. So we need to pick all four of those $\beta_p$ coefficients and the
value of $\sigma^2$, the residual variance, before we can simulate our glyphosate
levels.

```{r simulating y values}
# Make a table of true coefs for using later
coefs <-
	tibble::tribble(
		~term, ~estimate,
		"(Intercept)", 0.8,
		"dist_from_farm", -4,
		"personal_gly_use", 0.5,
		"water_filter_use", 0.4
	)
res_sd <- 0.25

gly_data <-
	gly_preds |>
	dplyr::mutate(
		mu = 0.8 - 4 * dist_from_farm + 0.5 * personal_gly_use -
			0.4 * water_filter_use,
		y_star = exp(rnorm(N, mu, res_sd))
	)

LoD <- 0.33

summary(gly_data)
```

You can see from the above simulation code that the values I ended up choosing
are as follows:

$$
\begin{aligned}
\log(y_i^*) &\sim \text{Normal}(\mu_i, 0.5^2) \\
\mu_i &= -2.5 + 2\cdot x_{1, i} + 0.5\cdot x_{2, i} -0.4\cdot x_{3, i}.
\end{aligned}
$$
These values seemed to give a reasonable range of $y$ values (on the natural
scale), and have signs that made sense to me. The intercept represents
the concentration of glyphosate expected in tap water for a person who lives
on the farm, no personal glyphosate use, and no water filter, and is
about $2.23$ ppm, which is quite high and perhaps expected for the point source
of the contaminant. With these parameters, we will have
$`r round(mean(gly_data[['y_star']] <= 0.33) * 100, 1)`\%$ of data points below
the limit of detection, which is not ideal (of course the ideal is zero
percent), but not too bad either.

Our censoring model looks like this:

$$
y_i = \begin{cases}
L, & y_i^* < 0.33 \text{ ppm} \\
y_i^*, & \text{otherwise}
\end{cases}.
$$
Our censoring indicator $C_i$ will look like this:

$$
c_i = \begin{cases}
1, & y_i^* < 0.33 \text{ ppm} \\
0, & \text{otherwise}
\end{cases}.
$$
Let's first apply the censoring to our data. We'll arbitrarily choose $L = 0$.
Then we'll take a look at the data we would actually observe.

```{r}
# Dataset including latent variables
# Do the censoring
L <- 0.1
gly_data_lnt <-
	gly_data |>
	dplyr::mutate(
		# Create the censoring indicator
		c = ifelse(y_star <= LoD, 1, 0),
		# Create the censored outcome
		y = ifelse(c == 1, L, y_star)
	)

# Dataset including ONLY the observed variables
gly_data_obs <- gly_data_lnt |>
	dplyr::select(dist_from_farm, personal_gly_use, water_filter_use, c, y)

head(gly_data_obs)
```

Note that setting $y_i = 0.1$ if the value is censored is **completely arbitrary**.
Many people will set it to a value like the LoD, or half the LoD, or some
crazy thing with $\sqrt{2}$ in it, and then pretend those are the real values.
**All of these arbitrary values are equally bad.** Let's look at the
distribution of the latent and observed values just to show this.
In real life, we can't see this, but this example should remind us that picking
an arbitrary number is not very good.

```{r}
# Arrange the data correctly for plotting
gly_data_lnt |>
	dplyr::select(
		"observed" = y,
		"latent" = y_star
	) |>
	tidyr::pivot_longer(dplyr::everything()) |>
	# Now make the plot
	ggplot() +
	aes(x = value) +
	geom_histogram(
		boundary = 0,
		binwidth = 0.1,
		color = "black",
		fill = "gray"
	) +
	facet_wrap(vars(name)) +
	ggtitle(paste0("Censored values coded as ", L))
```

Let's also take a look at what the data would have looked like if we set, say
$L = 0.33$ (the LoD).

```{r}
gly_data_lnt |>
	# Set censored values to LoD
	dplyr::mutate(y = ifelse(y == L, 0.33, y)) |>
	# Arrange the data for the plot
	dplyr::select(
		"observed" = y,
		"latent" = y_star
	) |>
	tidyr::pivot_longer(dplyr::everything()) |>
	# Make the plot
	ggplot() +
	aes(x = value) +
	geom_histogram(
		boundary = 0,
		binwidth = 0.1,
		color = "black",
		fill = "gray"
	) +
	facet_wrap(vars(name)) +
	ggtitle("Censored values coded as LoD")
```

We can see how this histogram makes the censored values look like actual data
(cat screaming emoji)!! Whereas the previous set of histograms with a spike at
zero should signal that there is something strange going on in the data. So
substitution can cause data to be misleading. For this reason, it can sometimes
be useful for analysts to record values as "Nondetect" or "< LoD" in the dataset
(or some other kind of text indicating it is not a regular number),
forcing the analyst to clean up the data before it can be statistically examined.
The problem can be somewhat avoided if we include an explicit indicator of
censoring in our data, like so.

```{r}
gly_data_lnt |>
		# Set censored values to LoD
	dplyr::mutate(y = ifelse(y == L, 0.33, y)) |>
	dplyr::select(
		"observed" = y,
		"latent" = y_star,
		c
	) |>
	tidyr::pivot_longer(-c) |>
	# Now make the plot
	ggplot() +
	aes(x = value, fill = factor(c)) +
	geom_histogram(
		boundary = 0,
		binwidth = 0.1,
		color = "black",
		alpha = 0.5,
		position = "stack"
	) +
	facet_wrap(vars(name)) +
	scale_fill_manual(values = c("#E69F00", "#56B4E9"), name  = "Below LoD?") +
	ggtitle(paste0("Censored values coded as LoD"))
```

```{r}
gly_data_lnt |>
	dplyr::select(
		"observed" = y,
		"latent" = y_star,
		c
	) |>
	tidyr::pivot_longer(-c) |>
	# Now make the plot
	ggplot() +
	aes(x = value, fill = factor(c)) +
	geom_histogram(
		boundary = 0,
		binwidth = 0.1,
		color = "black",
		alpha = 0.5,
		position = "stack"
	) +
	facet_wrap(vars(name)) +
	scale_fill_manual(values = c("#E69F00", "#56B4E9"), name  = "Below LoD?") +
	ggtitle(paste0("Censored values coded as ", L))
```

Here, we can see that the histogram conflates part of the censored and
non-censored values because of the binwidth we set. All that is to show, when
there is a possibly of censored data, we should be extra careful as analysts to
make sure we aren't computing incorrect statistics.

As another instructive example, let us first attempt to estimate the mean and SD
of the glyphosate concentrations. We know an unbiased estimate of marginal mean
and CI (that is, the statistic if we ignore all of the `x` values), because we
have the underlying latent values. So let's estimate those first.
(Because we have a normal distribution, we could probably get the analytical
marginal mean assuming unknown $x_i, p$ values, but we won't do that here.)
In R, we can quickly construct the Wald-type CI based on the `t`-distribution
using the `t.test()` function.

```{r}
latent_t_test <-
	gly_data_lnt$y_star |>
	# Remember we made a log-normal assumption so we take the log here
	log() |>
	t.test() |>
	broom::tidy() |>
	# Re-exponentiate the results
	dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high), exp))
print(latent_t_test)
```

Now, if we compute the same test using the observed values, we can see what
happens.

```{r}
observed_t_test <-
	gly_data_obs$y |>
	# Remember we made a log-normal assumption so we take the log here
	log() |>
	t.test() |>
	broom::tidy() |>
	# Re-exponentiate the results
	dplyr::mutate(dplyr::across(c(estimate, conf.low, conf.high), exp))
print(observed_t_test)
```

The estimate is much lower! In fact, the 95% CI doesn't even cover the latent
estimate! Of course, **we can arbitrarily change the estimate by recoding the
censored values.** If we bumped them up to the LoD, the estimate would go up
and if we made them lower, it would go down.

Despite knowing this, let's see what happens in our linear model.

## Naive linear models

Now, if we were entrusted with a data set for analysis and had no idea it was
censored, we would typically assume that values at the LoD are measured
exactly. Though, as we discussed, some EDA might be suggestive, we will fit
the ordinary linear regression model we described in the data generating
process earlier (here, we are fortunate enough to know that this is an
appropriate model, which is always untrue in the real world).

```{r}
# Fit the linear model
naive_lm <-
	lm(
		log(y) ~ 1 + dist_from_farm + personal_gly_use + water_filter_use,
		data = gly_data_obs
	)
# Print the results in a little table
naive_lm |>
	broom::tidy(conf.int = TRUE) |>
	tibble::add_column(truth = coefs$estimate) |>
	dplyr::select(term, estimate, conf.low, conf.high, truth) |>
	knitr::kable(digits = 3)
```

Here in the table we can see that all of the estimates are biased away from the
null, which is exactly what we don't want in this kind of study -- we would, if
anything, prefer that they be biased towards the null so we avoid overstating
the effect. Importantly, we can see that the CI's for `dist_from_farm`
and `personal_gly_use` **do not even contain the true value**! So even though
we know the exact data generating process, and we know our model reflects that,
**if we don't account for censoring, we can get completely wrong estimates**!

So, then, what are we to do?

## Integration method for censored data

We can regain some measure of our lost diginity using the integration trick we
discussed in the introduction. Of course, in the introduction, we only talked
about adjusting for censoring in the univariate case, but fortunately we
are modeling the **conditional distribution of $y$** so we can use the same
trick:

$$
\begin{aligned}
\mathcal{L}\left(\theta \mid y_i, x_i \right) &= f_{Y_i \mid X_i = x_i}(y_i \mid \theta, x_i) \\
&= \bigg( f(y_i \mid \theta, x) \bigg)^{1 - c_i} \bigg( P(Y_i = y_i \mid x)\bigg)^{c_i} \\
&= \bigg( f(y_i \mid \theta, x_i) \bigg)^{1 - c_i} \bigg( \int_{-\infty}^{y_\min} f(y_i \mid \theta, x_i) \ dy_i \bigg)^{c_i} \\
&= \bigg( f(y_i \mid \theta, x_i) \bigg)^{1 - c_i} \bigg( F(y_\min \mid \theta, x_i) \bigg)^{c_i}.
\end{aligned}
$$

The likelihood for $y_i$ is easy to write out here since the censoring structure
is (relatively) simple. This gives rise to the likelihood of the sample,
which (under the assumption of mutual conditional independence) is
$$
\mathcal{L}\left(\theta \mid x, y \right) =  \prod_{i = 1}^n \mathcal{L}\left(\theta \mid y_i, x_i \right).
$$

Now that we've conducted the likelihood, we can do either of the usual things
we would do to estimate the parameters: find the argument $\theta$ that
maximizes the likelihood, or apply some priors and use an algorithm to estimate
a Bayesian posterior.

Doing either of these is not too complicated for this specific example -- we
can easily write a function to optimize, or we could do some kind of grid
or quadratic posterior approximation. For this example, neither of those is
very difficult and should converge easily. But, we have the benefit of
excellent statistical tools that have already been written, so we might as
well use them.

### Frequentist models

The `R` package `survival` (which actually predates the `R` language) implements
parametric models of this form for many common distributions. Don't let the
name fool you: we can do models other than survival analysis. In this particular
case, we just need to specify a parametric model with a normal distribution and
left censoring. The syntax for this is a bit strange, we need to use the
`Surv()` function to set up a "survival object" which we pass as the response
variable in the `survreg()` function.

```{r}
# First we have to transform the outcome
surv_model <- survival::survreg(
	# Creating the "survival time" outcome
	survival::Surv(
		# If the value is lower than LoD, replace it w/ LoD, then take the log
		pmax(y, LoD) |> log(),
		# The censoring indicator needs to be the opposite of what makes sense --
		# zero for censored, one for uncensored
		!c,
		# Specify left censoring
		type = 'left'
	) ~
		# All the other linear model stuff as usual
		dist_from_farm + personal_gly_use + water_filter_use,
	data = gly_data_obs,
	dist = "gaussian"
)

surv_model |>
	broom::tidy(conf.int = TRUE) |>
	tibble::add_column(truth = c(coefs$estimate, log(res_var))) |>
	dplyr::select(term, estimate, conf.low, conf.high, truth) |>
	knitr::kable(digits = 3)
```

Despite all the finagling we have to do, we can see that the estimates are now
much better. Although the point estimates are not as close as we would expect
if we had the latent uncensored outcome variable, the confidence intervals
actually contain the true values this time. (Note that `Log(scale)` is the
estimated residual SD on the log scale, but for some reason the CI doesn't
get calculated by any of the `survival` methods.) Notably, the CIs for
this model are actually smaller than the the CIs for the naive model, even
though we're assuming there is extra uncertainty in the outcome. But we have
accounted for this uncertainty in the model, so it doesn't leak into the
parameter estimates (of course that's a non-technical explanation).

The worst part here is doing all that `Surv()` stuff, but fortunately there are
ways to avoid having to do all that. This method is commonly called the "Tobit
model" in econometrics, and there is a well-developed literature around this
model, and some variations and extensions. In particular, the `AER` package
provides a function called `tobit()` that allows one to specify these kind of
simple censoring models in standard `R` syntax, and automatically does the
conversion to a `survreg()` model.

```{r}
tobit_model <- AER::tobit(
	log(y) ~ dist_from_farm + personal_gly_use + water_filter_use,
	data = gly_data_obs,
	left = log(LoD),
	right = Inf,
	dist = "gaussian"
)

summary(tobit_model)
```

Now, if we want, it's also not too bad to do this in a Bayesian framework.

### Bayesian models

First we need to describe some basic priors that will work. For this example,
we know that the parameters actually have "true values" so assigning a
degenerate prior would actually reflect our true beliefs, but it's silly. So
we'll assign some usual weakly informative priors that will help our model
work right.

PRIORS HERE

Now, for this kind of model where only the outcome is censored, we can actually
have the super-handy `brms` R package do the heavy lifting for us. All we have
to do is a bit of data cleaning, and a bit of working specifying the model
structure, but the package will handle writing, compiling, and running all of
the Stan code, which is very conveninent.

BRMS CODE HERE

Unfortunately, not every model can be handled with `brms`, even though it's
very flexible. For example, when we talk about censored predictor values, we
won't be able to use `brms` for the approach we'll use. Instead, we'll have to
write our own Stan code, which is even more flexible than `brms` (though it
lacks many of the convenience features).

STAN CODE HERE.

## Conclusions

So, 

## Appendix: imputation methods {.appendix .unnumbered}



<!-- END OF FILE -->
